<!DOCTYPE html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/style.css">
    
    <!-- PWA ÈÖçÁΩÆ -->
    <link rel="manifest" href="/manifest.json">
    <meta name="theme-color" content="#000000">
    
    <!-- ÁßªÂä®ËÆæÂ§áÊîØÊåÅÁöÑ meta Ê†áÁ≠æ -->
    <meta name="mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="apple-mobile-web-app-title" content="Èü≥‰πêÊí≠ÊîæÂô®">
    <meta name="format-detection" content="telephone=no">
    
    <!-- Apple ËÆæÂ§áÂõæÊ†á -->
    <link rel="apple-touch-icon" href="/icons/icon-192x192.png">
    <link rel="apple-touch-icon" sizes="192x192" href="/icons/icon-192x192.png">
    <link rel="apple-touch-icon" sizes="512x512" href="/icons/icon-512x512.png">
    <!-- Ê∑ªÂä†ÈîôËØØÂ§ÑÁêÜÁöÑÊ†∑Âºè -->
    <style>
        .error-message {
            text-align: center;
            padding: 20px;
            color: #ff5555;
        }
        .url-toggle-container {
            display: flex;
            align-items: center;
            gap: 8px;
            color: #fff;
            font-size: 12px;
            margin-left: auto;
        }
        .url-toggle {
            position: relative;
            width: 32px;
            height: 12px;
            background-color: #333;
            border-radius: 6px;
            cursor: pointer;
            transition: background-color 0.3s;
            -webkit-app-region: no-drag;
        }
        .url-toggle.active {
            background-color: #007bff;
        }
        .url-toggle-slider {
            position: absolute;
            top: 1px;
            left: 1px;
            width: 10px;
            height: 10px;
            background-color: #fff;
            border-radius: 50%;
            transition: transform 0.3s;
        }
        .url-toggle.active .url-toggle-slider {
            transform: translateX(20px);
        }
        .url-toggle-label {
            font-size: 10px;
            color: #ccc;
        }
        .playlist-selector {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin: 15px 0;
            justify-content: center;
        }
        .playlist-btn {
            padding: 6px 12px;
            background-color: #333;
            color: #fff;
            border: 1px solid #555;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.3s;
            min-width: 50px;
        }
        .playlist-btn:hover {
            background-color: #555;
            border-color: #777;
        }
        .playlist-btn.active {
            background-color: #007bff;
            border-color: #007bff;
        }
        .playlist-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }
        
        /* ÊêúÁ¥¢ÂºπÁ™óÊ†∑Âºè */
        .search-modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(5px);
        }
        
        .search-modal-content {
            background-color: #1a1a1a;
            margin: 10% auto;
            padding: 30px;
            border: 1px solid #333;
            border-radius: 12px;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
        }
        
        .search-modal h3 {
            color: #fff;
            margin-top: 0;
            margin-bottom: 20px;
            text-align: center;
            font-size: 20px;
        }
        
        .search-input-group {
            margin-bottom: 20px;
        }
        
        .search-input-group label {
            display: block;
            color: #ccc;
            margin-bottom: 8px;
            font-size: 14px;
        }
        
        .search-input {
            width: 100%;
            padding: 12px;
            background-color: #333;
            border: 1px solid #555;
            border-radius: 6px;
            color: #fff;
            font-size: 14px;
            box-sizing: border-box;
        }
        
        .search-input:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
        }
        
        .search-buttons {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
            margin-top: 25px;
        }
        
        .search-btn {
            padding: 10px 20px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s;
        }
        
        .search-btn-primary {
            background-color: #007bff;
            color: white;
        }
        
        .search-btn-primary:hover {
            background-color: #0056b3;
        }
        
        .search-btn-secondary {
            background-color: #6c757d;
            color: white;
        }
        
        .search-btn-secondary:hover {
            background-color: #545b62;
        }
        
        .search-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }
        
        .search-status {
            margin-top: 15px;
            padding: 10px;
            border-radius: 6px;
            font-size: 14px;
            text-align: center;
            display: none;
        }
        
        .search-status.success {
            background-color: rgba(40, 167, 69, 0.2);
            color: #28a745;
            border: 1px solid #28a745;
        }
        
        .search-status.error {
            background-color: rgba(220, 53, 69, 0.2);
            color: #dc3545;
            border: 1px solid #dc3545;
        }
        
        .search-status.loading {
            background-color: rgba(0, 123, 255, 0.2);
            color: #007bff;
            border: 1px solid #007bff;
        }
        
        /* ÊåâÈíÆÁªÑÊ†∑Âºè */
        .button-group {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin-top: 15px;
        }
        
        .button-group .buy-button {
            flex: 1;
            max-width: 120px;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <div class="window-controls">
                <span class="close"></span>
                <span class="minimize"></span>
                <span class="maximize"></span>
            </div>
            <div class="app-title">
                <i class="fas fa-music"></i> Èü≥‰πêÊí≠ÊîæÂô®
            </div>
            <div class="url-toggle-container">
                <span class="url-toggle-label">Èü≥Ê∫êÊ®°Âºè</span>
                <div class="url-toggle" id="url-toggle" data-mode="from_api">
                    <div class="url-toggle-slider"></div>
                </div>
                <span class="url-toggle-label" id="toggle-mode-text">API</span>
            </div>
            <div class="user-info">
                <span class="username"></span>
            </div>
        </header>
        <main>
            <aside class="album-info">
                <img src="/icons/icon-192x192.png" alt="Album Cover" class="album-cover" id="current-album-cover">
                <div class="album-info-text">
                    <h2 class="song-title-display">ÈÄâÊã©‰∏ÄÈ¶ñÊ≠åÊõ≤</h2>
                    <p class="artist-display">by Êú™Áü•Ëâ∫ÊúØÂÆ∂</p>
                </div>
                <!-- Ê≠åÂçïÈÄâÊã©ÊåâÈíÆÁªÑ -->
                <div class="playlist-selector">
                    <button class="playlist-btn active" data-playlist="costomer" title="Áî®Êà∑Ê≠åÂçï">üë§</button>
                    <button class="playlist-btn" data-playlist="hot" title="ÁÉ≠Èó®Ê≠åÊõ≤">üî•</button>
                    <button class="playlist-btn" data-playlist="new" title="ÊúÄÊñ∞Ê≠åÊõ≤">üÜï</button>
                    <button class="playlist-btn" data-playlist="original" title="ÂéüÂàõÊ≠åÊõ≤">üéµ</button>
                    <button class="playlist-btn" data-playlist="soaring" title="È£ôÂçáÊ≠åÊõ≤">üìà</button>
                </div>
                <div class="button-group">
                    <button class="buy-button" id="download-button" title="‰∏ãËΩΩÊ≠åÊõ≤">‚¨áÔ∏è</button>
                    <button class="buy-button" id="search-button" title="ÊêúÁ¥¢Ê≠åÊõ≤">üîç</button>
                    <button class="buy-button" id="refresh-button" title="Âà∑Êñ∞Ê≠åÂçï">üîÑ</button>
                </div>
            </aside>
            <section class="playlist">
                <% if (songs && songs.length > 0) { %>
                    <% songs.forEach((song, index) => { %>
                        <div class="song-item" 
                             data-src="<%= song.src %>" 
                             data-cover="<%= song.cover %>" 
                             data-track-id="<%= song.trackId %>" 
                             data-source="<%= song.source %>">
                            <span class="song-number"><%= String(index + 1).padStart(String(songs.length).length, '0') %> </span>
                            <span class="song-title"><%= song.title %></span>
                            <span class="song-artist"><%= song.artist %></span>
                        </div>
                    <% }); %>
                <% } else { %>
                    <div class="error-message">
                        <p>Ê≤°ÊúâÊâæÂà∞Èü≥‰πêÊñá‰ª∂ÔºåËØ∑Ê£ÄÊü• music_list.json Êñá‰ª∂ÊàñÁΩëÁªúËøûÊé•</p>
                    </div>
                <% } %>
            </section>
        </main>
        <footer>
            <div class="player-controls">
                <i class="fas fa-backward"></i>
                <i class="fas fa-play"></i>
                <i class="fas fa-forward"></i>
            </div>
            <div class="playback-bar">
                <span class="current-time">0:00</span>
                <div class="progress-bar">
                    <div class="progress"></div>
                    <div class="seek-thumb"></div>
                </div>
                <span class="total-time">0:00</span>
            </div>
            <div class="volume-control">
                <i class="fas fa-volume-up"></i>
                <input type="range" class="volume-slider" min="0" max="100" value="50" 
                       aria-label="Èü≥ÈáèÊéßÂà∂" 
                       title="Ë∞ÉËäÇÈü≥Èáè" 
                       role="slider" 
                       aria-valuemin="0" 
                       aria-valuemax="100" 
                       aria-valuenow="50">
            </div>
        </footer>
    </div>
    
    <!-- ÊêúÁ¥¢ÂºπÁ™ó -->
    <div id="search-modal" class="search-modal">
        <div class="search-modal-content">
            <h3><i class="fas fa-search"></i> ÊêúÁ¥¢Ê≠åÊõ≤</h3>
            <div class="search-input-group">
                <label for="search-keyword">Ê≠åÊõ≤ÂêçÁß∞ÊàñÊ≠åÊâãÂßìÂêçÔºö</label>
                <input type="text" id="search-keyword" class="search-input" placeholder="ËØ∑ËæìÂÖ•Ê≠åÊõ≤ÂêçÁß∞ÊàñÊ≠åÊâãÂßìÂêç..." maxlength="100">
            </div>
            <div class="search-buttons">
                <button type="button" class="search-btn search-btn-secondary" id="search-cancel">ÂèñÊ∂à</button>
                <button type="button" class="search-btn search-btn-primary" id="search-confirm">ÊêúÁ¥¢</button>
            </div>
            <div id="search-status" class="search-status"></div>
        </div>
    </div>
    
    <!-- Font Awesome ÂõæÊ†áÂ∫ì -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    
    <!-- Êí≠ÊîæÂô® JavaScript -->
    <script src="/player.js"></script>
    
    <!-- ÊêúÁ¥¢ÂäüËÉΩ JavaScript -->
    <script>
        // ÊêúÁ¥¢ÂäüËÉΩÁõ∏ÂÖ≥ÂèòÈáè
        const searchModal = document.getElementById('search-modal');
        const searchButton = document.getElementById('search-button');
        const searchCancel = document.getElementById('search-cancel');
        const searchConfirm = document.getElementById('search-confirm');
        const searchKeyword = document.getElementById('search-keyword');
        const searchStatus = document.getElementById('search-status');
        
        // ÊòæÁ§∫ÊêúÁ¥¢ÂºπÁ™ó
        function showSearchModal() {
            searchModal.style.display = 'block';
            searchKeyword.focus();
            searchKeyword.value = '';
            hideSearchStatus();
        }
        
        // ÈöêËóèÊêúÁ¥¢ÂºπÁ™ó
        function hideSearchModal() {
            searchModal.style.display = 'none';
            searchKeyword.value = '';
            hideSearchStatus();
        }
        
        // ÊòæÁ§∫ÊêúÁ¥¢Áä∂ÊÄÅ
        function showSearchStatus(message, type = 'loading') {
            searchStatus.textContent = message;
            searchStatus.className = `search-status ${type}`;
            searchStatus.style.display = 'block';
        }
        
        // ÈöêËóèÊêúÁ¥¢Áä∂ÊÄÅ
        function hideSearchStatus() {
            searchStatus.style.display = 'none';
        }
        
        // Âä†ËΩΩÊêúÁ¥¢ÁªìÊûú
        function loadSearchResults(searchData) {
            if (!searchData || !searchData.songs || !Array.isArray(searchData.songs)) {
                console.error('ÊêúÁ¥¢ÁªìÊûúÊï∞ÊçÆÊ†ºÂºèÈîôËØØ');
                return;
            }
            
            // Êõ¥Êñ∞Ê≠åÊõ≤ÂàóË°®
            playlist = searchData.songs;
            
            // Êõ¥Êñ∞Êí≠ÊîæÂàóË°®Ê†áÈ¢ò
            const playlistTitle = document.querySelector('.playlist-title');
            if (playlistTitle) {
                playlistTitle.textContent = `ÊêúÁ¥¢ÁªìÊûú (${playlist.length}È¶ñ)`;
            }
            
            // ÂèñÊ∂àÊâÄÊúâÊ≠åÂçïÊåâÈíÆÁöÑÊøÄÊ¥ªÁä∂ÊÄÅ
            const playlistButtons = document.querySelectorAll('.playlist-btn');
            playlistButtons.forEach(button => {
                button.classList.remove('active');
            });
            
            // ËÆæÁΩÆÂΩìÂâçÊ≠åÂçïÂêçÁß∞‰∏∫ÊêúÁ¥¢Áä∂ÊÄÅ
            if (typeof currentPlaylistName !== 'undefined') {
                currentPlaylistName = 'search';
            }
            
            // ÈáçÊñ∞Ê∏≤ÊüìÊ≠åÊõ≤ÂàóË°®
            renderPlaylistHTML();
            
            // Â¶ÇÊûúÂΩìÂâçÊ≤°ÊúâÊí≠ÊîæÊ≠åÊõ≤ÔºåËÆæÁΩÆÁ¨¨‰∏ÄÈ¶ñ‰∏∫ÂΩìÂâçÊ≠åÊõ≤
            if (playlist.length > 0 && currentSongIndex === -1) {
                currentSongIndex = 0;
                loadSong(currentSongIndex);
            }
            
            console.log(`ÊêúÁ¥¢ÁªìÊûúÂ∑≤Âä†ËΩΩÔºö${playlist.length}È¶ñÊ≠åÊõ≤`);
        }
        
        // ÊâßË°åÊêúÁ¥¢
        async function performSearch() {
            const keyword = searchKeyword.value.trim();
            
            if (!keyword) {
                showSearchStatus('ËØ∑ËæìÂÖ•ÊêúÁ¥¢ÂÖ≥ÈîÆËØç', 'error');
                return;
            }
            
            // Á¶ÅÁî®ÊêúÁ¥¢ÊåâÈíÆ
            searchConfirm.disabled = true;
            searchCancel.disabled = true;
            showSearchStatus('Ê≠£Âú®ÊêúÁ¥¢Ê≠åÊõ≤ÔºåËØ∑Á®çÂÄô...', 'loading');
            
            try {
                // Ë∞ÉÁî®ÂêéÁ´ØÊêúÁ¥¢API
                const response = await fetch('/api/search-songs', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ keyword: keyword })
                });
                
                const result = await response.json();
                
                if (response.ok && result.success) {
                    showSearchStatus(`ÊêúÁ¥¢ÂÆåÊàêÔºÅÊâæÂà∞ ${result.totalSongs} È¶ñÊ≠åÊõ≤ÔºåÊ≠£Âú®Âà∑Êñ∞È°µÈù¢...`, 'success');
                    
                    // Âª∂ËøüÂêéÂä†ËΩΩÊêúÁ¥¢ÁªìÊûú
                    setTimeout(() => {
                        loadSearchResults(result.data);
                        hideSearchModal();
                    }, 1500);
                } else {
                    showSearchStatus(result.message || 'ÊêúÁ¥¢Â§±Ë¥•ÔºåËØ∑ÈáçËØï', 'error');
                }
            } catch (error) {
                console.error('ÊêúÁ¥¢ËØ∑Ê±ÇÂ§±Ë¥•:', error);
                showSearchStatus('ÁΩëÁªúÈîôËØØÔºåËØ∑Ê£ÄÊü•ËøûÊé•ÂêéÈáçËØï', 'error');
            } finally {
                // ÈáçÊñ∞ÂêØÁî®ÊåâÈíÆ
                searchConfirm.disabled = false;
                searchCancel.disabled = false;
            }
        }
        
        // ‰∫ã‰ª∂ÁõëÂê¨Âô®
        searchButton.addEventListener('click', showSearchModal);
        searchCancel.addEventListener('click', hideSearchModal);
        searchConfirm.addEventListener('click', performSearch);
        
        // ÁÇπÂáªÂºπÁ™óÂ§ñÈÉ®ÂÖ≥Èó≠
        searchModal.addEventListener('click', function(event) {
            if (event.target === searchModal) {
                hideSearchModal();
            }
        });
        
        // ÂõûËΩ¶ÈîÆÊêúÁ¥¢
        searchKeyword.addEventListener('keypress', function(event) {
            if (event.key === 'Enter' && !searchConfirm.disabled) {
                performSearch();
            }
        });
        
        // ESCÈîÆÂÖ≥Èó≠ÂºπÁ™ó
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape' && searchModal.style.display === 'block') {
                hideSearchModal();
            }
        });
        
        // Âà∑Êñ∞Ê≠åÂçïÂäüËÉΩ
        const refreshButton = document.getElementById('refresh-button');
        
        async function performRefresh() {
            try {
                // Á¶ÅÁî®Âà∑Êñ∞ÊåâÈíÆ
                refreshButton.disabled = true;
                refreshButton.innerHTML = '‚è≥';
                
                const response = await fetch('/api/refresh-playlists', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                const result = await response.json();
                
                if (response.ok && result.success) {
                    // Âà∑Êñ∞ÊàêÂäüÔºåÈáçÊñ∞Âä†ËΩΩÈ°µÈù¢
                    window.location.reload();
                } else {
                    alert('Âà∑Êñ∞Ê≠åÂçïÂ§±Ë¥•: ' + (result.message || 'Êú™Áü•ÈîôËØØ'));
                    // ÊÅ¢Â§çÊåâÈíÆÁä∂ÊÄÅ
                    refreshButton.disabled = false;
                    refreshButton.innerHTML = 'üîÑ';
                }
            } catch (error) {
                console.error('Âà∑Êñ∞Ê≠åÂçïËØ∑Ê±ÇÂ§±Ë¥•:', error);
                alert('ÁΩëÁªúÈîôËØØÔºåËØ∑Ê£ÄÊü•ËøûÊé•ÂêéÈáçËØï');
                // ÊÅ¢Â§çÊåâÈíÆÁä∂ÊÄÅ
                refreshButton.disabled = false;
                refreshButton.innerHTML = 'üîÑ';
            }
        }
        
        // Âà∑Êñ∞ÊåâÈíÆ‰∫ã‰ª∂ÁõëÂê¨Âô®
        refreshButton.addEventListener('click', performRefresh);
    </script>
    
    <!-- Service Worker Ê≥®ÂÜå -->
    <script>
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                navigator.serviceWorker.register('/sw.js')
                    .then(registration => {
                        console.log('SW registered: ', registration);
                    })
                    .catch(registrationError => {
                        console.log('SW registration failed: ', registrationError);
                    });
            });
        }
    </script>
</body>
</html>